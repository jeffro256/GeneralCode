package jeffrey_ryan.mle.states;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.event.KeyEvent;

import jeffrey_ryan.gamecore2d.input.KeyInputHandler;
import jeffrey_ryan.gamecore2d.node.GameScene;
import jeffrey_ryan.gamecore2d.physics.PhysicsProperties;
import jeffrey_ryan.gamecore2d.physics.Vector2D;
import jeffrey_ryan.mle.map.GameMap;
import jeffrey_ryan.mle.player.Player;

public class PlayState extends GameScene {
	private GameMap map;
	private Player p1, p2;
	private KeyInputHandler keyHandler;
	
	public PlayState() {
		name = "Play State";
		keyHandler = new KeyInputHandler();
		
		String mapName = "Map";
		Vector2D mapSize = new Vector2D(20, 10);
		Vector2D camPos = new Vector2D();
		map = new GameMap(mapName, mapSize, camPos);
		map.zPos = -10;
		
		String pname = "Player 1";
		Vector2D psize = new Vector2D(0.75, 1.75);
		PhysicsProperties pprops = new PhysicsProperties();
		pprops.pos.x = 4;
		pprops.pos.y = -map.getSize().y / 2 + psize.y;
		pprops.mass = 80;

		p1 = new Player(pname, psize, pprops, Color.RED);
		p1.zPos = 10;
		
		pname = "Player 2";
		psize = new Vector2D(psize);
		pprops = new PhysicsProperties();
		pprops.pos.x = -4;
		pprops.pos.y = -map.getSize().y / 2 + psize.y;
		pprops.mass = 80;
		
		p2 = new Player(pname, psize, pprops, Color.BLUE);
		p2.zPos = 10;

		addChild(map);
		addChild(p1);
		addChild(p2);
	}
	
	@Override
	public void update(double seconds) {
		p1.pprops.accel.y -= 9.8;
		p2.pprops.accel.y -= 9.8;
		
		boolean onGround = p1.pprops.pos.y <= -map.getSize().y / 2 + p1.size.y / 2;
		if (keyHandler.getKey(KeyEvent.VK_UP) && onGround) {
			p1.pprops.applyImpluse(new Vector2D(0, 1000));
		}
		
		if (keyHandler.getKey(KeyEvent.VK_LEFT)) {
			p1.pprops.pos.x -= seconds * p1.moveSpeed;
		}
		
		if (keyHandler.getKey(KeyEvent.VK_RIGHT)) {
			p1.pprops.pos.x += seconds * p1.moveSpeed;
		}
		
		p1.pprops.update(seconds);
		
		if (p1.pprops.pos.y - p1.size.y / 2 < -map.getSize().y / 2) {
			p1.pprops.vel.y = 0;
			p1.pprops.pos.y = -map.getSize().y / 2 + p1.size.y / 2;
		}
		
		onGround = p2.pprops.pos.y <= -map.getSize().y / 2 + p2.size.y / 2;
		if (keyHandler.getKey(KeyEvent.VK_W) && onGround) {
			p2.pprops.applyImpluse(new Vector2D(0, 1000));
		}
		
		if (keyHandler.getKey(KeyEvent.VK_A)) {
			p2.pprops.pos.x -= seconds * p2.moveSpeed;
		}
		
		if (keyHandler.getKey(KeyEvent.VK_D)) {
			p2.pprops.pos.x += seconds * p2.moveSpeed;
		}
		
		p2.pprops.update(seconds);
		
		if (p2.pprops.pos.y - p2.size.y / 2 < -map.getSize().y / 2) {
			p2.pprops.vel.y = 0;
			p2.pprops.pos.y = -map.getSize().y / 2 + p2.size.y / 2;
		}
	}
	
	@Override
	public void render(Graphics2D g, float interpolation) {
		g.setBackground(Color.CYAN);
		super.render(g, interpolation);
	}

	@Override
	public void enter() {
		gsm.getPanel().addKeyListener(keyHandler);
		
		double zoom = getCanvasSize().getWidth() / map.getSize().x;
		map.setUnitRatio(zoom);
	}
}
